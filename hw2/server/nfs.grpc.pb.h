// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: nfs.proto
#ifndef GRPC_nfs_2eproto__INCLUDED
#define GRPC_nfs_2eproto__INCLUDED

#include "nfs.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nfs {

//
// Here we can add more functionality later, we have a good enough start for
// now.
//
class NFS GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // No null call for now (not sure if needed since grpc is smart itself!)
    virtual ::grpc::Status lookup(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::nfs::LookupReturn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::LookupReturn>> Asynclookup(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::LookupReturn>>(AsynclookupRaw(context, request, cq));
    }
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::nfs::CreateReturn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::CreateReturn>> Asynccreate(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::CreateReturn>>(AsynccreateRaw(context, request, cq));
    }
    virtual ::grpc::Status remove(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::nfs::RemoveReturn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::RemoveReturn>> Asyncremove(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::RemoveReturn>>(AsyncremoveRaw(context, request, cq));
    }
    virtual ::grpc::Status read(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::nfs::ReadReturn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::ReadReturn>> Asyncread(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::ReadReturn>>(AsyncreadRaw(context, request, cq));
    }
    virtual ::grpc::Status write(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::nfs::WriteReturn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::WriteReturn>> Asyncwrite(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfs::WriteReturn>>(AsyncwriteRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::LookupReturn>* AsynclookupRaw(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::CreateReturn>* AsynccreateRaw(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::RemoveReturn>* AsyncremoveRaw(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::ReadReturn>* AsyncreadRaw(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfs::WriteReturn>* AsyncwriteRaw(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status lookup(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::nfs::LookupReturn* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::LookupReturn>> Asynclookup(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::LookupReturn>>(AsynclookupRaw(context, request, cq));
    }
    ::grpc::Status create(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::nfs::CreateReturn* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::CreateReturn>> Asynccreate(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::CreateReturn>>(AsynccreateRaw(context, request, cq));
    }
    ::grpc::Status remove(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::nfs::RemoveReturn* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::RemoveReturn>> Asyncremove(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::RemoveReturn>>(AsyncremoveRaw(context, request, cq));
    }
    ::grpc::Status read(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::nfs::ReadReturn* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::ReadReturn>> Asyncread(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::ReadReturn>>(AsyncreadRaw(context, request, cq));
    }
    ::grpc::Status write(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::nfs::WriteReturn* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::WriteReturn>> Asyncwrite(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfs::WriteReturn>>(AsyncwriteRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::nfs::LookupReturn>* AsynclookupRaw(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfs::CreateReturn>* AsynccreateRaw(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfs::RemoveReturn>* AsyncremoveRaw(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfs::ReadReturn>* AsyncreadRaw(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfs::WriteReturn>* AsyncwriteRaw(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_lookup_;
    const ::grpc::RpcMethod rpcmethod_create_;
    const ::grpc::RpcMethod rpcmethod_remove_;
    const ::grpc::RpcMethod rpcmethod_read_;
    const ::grpc::RpcMethod rpcmethod_write_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // No null call for now (not sure if needed since grpc is smart itself!)
    virtual ::grpc::Status lookup(::grpc::ServerContext* context, const ::nfs::LookupArgs* request, ::nfs::LookupReturn* response);
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::nfs::CreateArgs* request, ::nfs::CreateReturn* response);
    virtual ::grpc::Status remove(::grpc::ServerContext* context, const ::nfs::RemoveArgs* request, ::nfs::RemoveReturn* response);
    virtual ::grpc::Status read(::grpc::ServerContext* context, const ::nfs::ReadArgs* request, ::nfs::ReadReturn* response);
    virtual ::grpc::Status write(::grpc::ServerContext* context, const ::nfs::WriteArgs* request, ::nfs::WriteReturn* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_lookup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_lookup() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lookup(::grpc::ServerContext* context, const ::nfs::LookupArgs* request, ::nfs::LookupReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlookup(::grpc::ServerContext* context, ::nfs::LookupArgs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::LookupReturn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_create() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfs::CreateArgs* request, ::nfs::CreateReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::nfs::CreateArgs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::CreateReturn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_remove() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_remove() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove(::grpc::ServerContext* context, const ::nfs::RemoveArgs* request, ::nfs::RemoveReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestremove(::grpc::ServerContext* context, ::nfs::RemoveArgs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::RemoveReturn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfs::ReadArgs* request, ::nfs::ReadReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread(::grpc::ServerContext* context, ::nfs::ReadArgs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::ReadReturn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_write() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfs::WriteArgs* request, ::nfs::WriteReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite(::grpc::ServerContext* context, ::nfs::WriteArgs* request, ::grpc::ServerAsyncResponseWriter< ::nfs::WriteReturn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_lookup<WithAsyncMethod_create<WithAsyncMethod_remove<WithAsyncMethod_read<WithAsyncMethod_write<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_lookup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_lookup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_lookup() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status lookup(::grpc::ServerContext* context, const ::nfs::LookupArgs* request, ::nfs::LookupReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_create() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfs::CreateArgs* request, ::nfs::CreateReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_remove() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_remove() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status remove(::grpc::ServerContext* context, const ::nfs::RemoveArgs* request, ::nfs::RemoveReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfs::ReadArgs* request, ::nfs::ReadReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_write() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfs::WriteArgs* request, ::nfs::WriteReturn* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace nfs


#endif  // GRPC_nfs_2eproto__INCLUDED
