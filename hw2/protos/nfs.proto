syntax = "proto3";

package nfs;

// File handle type, need inode #, filesystem & generation #.
message FileHandle {
    uint64 inode = 1;
    uint64 genum = 2;
}

message Attribute {
    uint32 mode = 1;
    uint32 uid = 2;
    uint32 gid = 3;
    uint64 size = 4;
    uint64 atime = 5;
    uint64 mtime = 6;
    uint32 atime_nsec = 7;
    uint32 mtime_nsec = 8;

    // these are in stat struct but not bazil attr, so we ignore for now
    /*
    uint64 dev = 1;
    uint64 ino = 2;
    uint64 nlink = 3;
    uint64 blksize = 9;
    uint64 blocks = 10;
    uint64 rdev = 7;
    uint64 ctime = 13;
    */
}

// nfs protocol describes using cookies (each entry links to the next),
// but we can assume for now that it's unnecessary with gorpc
// model this after fuse.Dirent
message Dirent {
    uint64 inode = 1;
    string name = 2;
    uint32 mode = 3; // can use this to tell if it's a file or dir
}

// Hacky solution to multiple parameter, just follow convention: MethodNameArgs
message LookupArgs {
    FileHandle dirfh = 1;
    string name = 2;
}

// Hacky solution to multiple retval, just follow convention: MethodNameReturn
message LookupReturn {
    FileHandle fh = 1;
    Attribute attr = 2;
}

message RootArgs {
    string path = 1;
}

message RootReturn {
    FileHandle fh = 1;
    Attribute attr = 2;
}

message CreateArgs {
    FileHandle dirfh = 1;
    string name = 2;
    Attribute attr = 3;
}

message CreateReturn {
    FileHandle newfh = 1;
    Attribute attr = 2;
}

message RemoveArgs {
    FileHandle dirfh = 1;
    string name = 2;
}

message RemoveReturn {
    int32 status = 1; // TODO: Double check if that's right type
}

/*
 * For now, just focusing on basic file & fs ops, can add set/get attr's later!
 */

message ReadArgs {
    FileHandle fh = 1;
    int64 offset = 2;
    int64 count = 3;
}

message ReadReturn {
    Attribute attr = 1;
    bytes data = 2;
}

message WriteArgs {
    FileHandle fh = 1;
    int64 offset = 2;
    int64 count = 3;
    bytes data = 4;
}

// Yes, even for single retval's, follow convention for consistency
message WriteReturn {
    Attribute attr = 1; 
}

message ReaddirArgs {
    FileHandle dirfh = 1;
    uint64 count = 2;
    // uint64 cookie = 3; // ignore cookies for now
}

message ReaddirReturn {
    // directory entries
    repeated Dirent entries = 1;
}

message GetAttrArgs {
    FileHandle fh = 1;
}

message GetAttrReturn {
    Attribute attr = 1;
}

message MkdirArgs {
    FileHandle dirfh = 1;
    string name = 2;
    Attribute attr = 3; 
}

message MkdirReturn {
    FileHandle fh = 1;
    Attribute attr = 2; 
}



/*
 * Here we can add more functionality later, we have a good enough start for
 * now.
 */
 
service NFS {
    // No null call for now (not sure if needed since grpc is smart itself!)
    rpc root(RootArgs) returns (RootReturn) {} // we aren't going to use the LookupArgs here; 
    rpc lookup(LookupArgs) returns (LookupReturn) {}
    rpc create(CreateArgs) returns (CreateReturn) {}
    rpc remove(RemoveArgs) returns (RemoveReturn) {}
    rpc read(ReadArgs) returns (ReadReturn) {}
    rpc write(WriteArgs) returns (WriteReturn) {}
    rpc readdir(ReaddirArgs) returns (ReaddirReturn) {}
    rpc getattr(GetAttrArgs) returns (GetAttrReturn) {}
    rpc mkdir(MkdirArgs) returns (MkdirReturn) {}
}
