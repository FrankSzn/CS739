// Code generated by protoc-gen-go.
// source: nfs.proto
// DO NOT EDIT!

/*
Package nfs is a generated protocol buffer package.

It is generated from these files:
	nfs.proto

It has these top-level messages:
	FileHandle
	Attribute
	Dirent
	LookupArgs
	LookupReturn
	RootArgs
	RootReturn
	CreateArgs
	CreateReturn
	RemoveArgs
	RemoveReturn
	ReadArgs
	ReadReturn
	WriteArgs
	WriteReturn
	ReaddirArgs
	ReaddirReturn
*/
package nfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// File handle type, need inode #, filesystem & generation #.
type FileHandle struct {
	Inode uint64 `protobuf:"varint,1,opt,name=inode" json:"inode,omitempty"`
	Genum uint64 `protobuf:"varint,2,opt,name=genum" json:"genum,omitempty"`
}

func (m *FileHandle) Reset()                    { *m = FileHandle{} }
func (m *FileHandle) String() string            { return proto.CompactTextString(m) }
func (*FileHandle) ProtoMessage()               {}
func (*FileHandle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Attribute struct {
	Mode      uint32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
	Uid       uint32 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Gid       uint32 `protobuf:"varint,3,opt,name=gid" json:"gid,omitempty"`
	Size      uint64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Atime     uint64 `protobuf:"varint,5,opt,name=atime" json:"atime,omitempty"`
	Mtime     uint64 `protobuf:"varint,6,opt,name=mtime" json:"mtime,omitempty"`
	AtimeNsec uint32 `protobuf:"varint,7,opt,name=atime_nsec,json=atimeNsec" json:"atime_nsec,omitempty"`
	MtimeNsec uint32 `protobuf:"varint,8,opt,name=mtime_nsec,json=mtimeNsec" json:"mtime_nsec,omitempty"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// nfs protocol describes using cookies (each entry links to the next),
// but we can assume for now that it's unnecessary with gorpc
// model this after fuse.Dirent
type Dirent struct {
	Inode uint64 `protobuf:"varint,1,opt,name=inode" json:"inode,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Mode  uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (m *Dirent) Reset()                    { *m = Dirent{} }
func (m *Dirent) String() string            { return proto.CompactTextString(m) }
func (*Dirent) ProtoMessage()               {}
func (*Dirent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Hacky solution to multiple parameter, just follow convention: MethodNameArgs
type LookupArgs struct {
	Dirfh *FileHandle `protobuf:"bytes,1,opt,name=dirfh" json:"dirfh,omitempty"`
	Name  string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *LookupArgs) Reset()                    { *m = LookupArgs{} }
func (m *LookupArgs) String() string            { return proto.CompactTextString(m) }
func (*LookupArgs) ProtoMessage()               {}
func (*LookupArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LookupArgs) GetDirfh() *FileHandle {
	if m != nil {
		return m.Dirfh
	}
	return nil
}

// Hacky solution to multiple retval, just follow convention: MethodNameReturn
type LookupReturn struct {
	Fh   *FileHandle `protobuf:"bytes,1,opt,name=fh" json:"fh,omitempty"`
	Attr *Attribute  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *LookupReturn) Reset()                    { *m = LookupReturn{} }
func (m *LookupReturn) String() string            { return proto.CompactTextString(m) }
func (*LookupReturn) ProtoMessage()               {}
func (*LookupReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LookupReturn) GetFh() *FileHandle {
	if m != nil {
		return m.Fh
	}
	return nil
}

func (m *LookupReturn) GetAttr() *Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RootArgs struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *RootArgs) Reset()                    { *m = RootArgs{} }
func (m *RootArgs) String() string            { return proto.CompactTextString(m) }
func (*RootArgs) ProtoMessage()               {}
func (*RootArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RootReturn struct {
	Fh   *FileHandle `protobuf:"bytes,1,opt,name=fh" json:"fh,omitempty"`
	Attr *Attribute  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *RootReturn) Reset()                    { *m = RootReturn{} }
func (m *RootReturn) String() string            { return proto.CompactTextString(m) }
func (*RootReturn) ProtoMessage()               {}
func (*RootReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RootReturn) GetFh() *FileHandle {
	if m != nil {
		return m.Fh
	}
	return nil
}

func (m *RootReturn) GetAttr() *Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type CreateArgs struct {
	Dirfh *FileHandle `protobuf:"bytes,1,opt,name=dirfh" json:"dirfh,omitempty"`
	Name  string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Attr  *Attribute  `protobuf:"bytes,3,opt,name=attr" json:"attr,omitempty"`
}

func (m *CreateArgs) Reset()                    { *m = CreateArgs{} }
func (m *CreateArgs) String() string            { return proto.CompactTextString(m) }
func (*CreateArgs) ProtoMessage()               {}
func (*CreateArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateArgs) GetDirfh() *FileHandle {
	if m != nil {
		return m.Dirfh
	}
	return nil
}

func (m *CreateArgs) GetAttr() *Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type CreateReturn struct {
	Newfh *FileHandle `protobuf:"bytes,1,opt,name=newfh" json:"newfh,omitempty"`
	Attr  *Attribute  `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *CreateReturn) Reset()                    { *m = CreateReturn{} }
func (m *CreateReturn) String() string            { return proto.CompactTextString(m) }
func (*CreateReturn) ProtoMessage()               {}
func (*CreateReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateReturn) GetNewfh() *FileHandle {
	if m != nil {
		return m.Newfh
	}
	return nil
}

func (m *CreateReturn) GetAttr() *Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type RemoveArgs struct {
	Dirfh *FileHandle `protobuf:"bytes,1,opt,name=dirfh" json:"dirfh,omitempty"`
	Name  string      `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *RemoveArgs) Reset()                    { *m = RemoveArgs{} }
func (m *RemoveArgs) String() string            { return proto.CompactTextString(m) }
func (*RemoveArgs) ProtoMessage()               {}
func (*RemoveArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RemoveArgs) GetDirfh() *FileHandle {
	if m != nil {
		return m.Dirfh
	}
	return nil
}

type RemoveReturn struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *RemoveReturn) Reset()                    { *m = RemoveReturn{} }
func (m *RemoveReturn) String() string            { return proto.CompactTextString(m) }
func (*RemoveReturn) ProtoMessage()               {}
func (*RemoveReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type ReadArgs struct {
	Fh     *FileHandle `protobuf:"bytes,1,opt,name=fh" json:"fh,omitempty"`
	Offset int64       `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Count  int64       `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *ReadArgs) Reset()                    { *m = ReadArgs{} }
func (m *ReadArgs) String() string            { return proto.CompactTextString(m) }
func (*ReadArgs) ProtoMessage()               {}
func (*ReadArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReadArgs) GetFh() *FileHandle {
	if m != nil {
		return m.Fh
	}
	return nil
}

type ReadReturn struct {
	Attr *Attribute `protobuf:"bytes,1,opt,name=attr" json:"attr,omitempty"`
	Data []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ReadReturn) Reset()                    { *m = ReadReturn{} }
func (m *ReadReturn) String() string            { return proto.CompactTextString(m) }
func (*ReadReturn) ProtoMessage()               {}
func (*ReadReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadReturn) GetAttr() *Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type WriteArgs struct {
	Fh     *FileHandle `protobuf:"bytes,1,opt,name=fh" json:"fh,omitempty"`
	Offset int64       `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Count  int64       `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	Data   []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteArgs) Reset()                    { *m = WriteArgs{} }
func (m *WriteArgs) String() string            { return proto.CompactTextString(m) }
func (*WriteArgs) ProtoMessage()               {}
func (*WriteArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WriteArgs) GetFh() *FileHandle {
	if m != nil {
		return m.Fh
	}
	return nil
}

// Yes, even for single retval's, follow convention for consistency
type WriteReturn struct {
	Attr *Attribute `protobuf:"bytes,1,opt,name=attr" json:"attr,omitempty"`
}

func (m *WriteReturn) Reset()                    { *m = WriteReturn{} }
func (m *WriteReturn) String() string            { return proto.CompactTextString(m) }
func (*WriteReturn) ProtoMessage()               {}
func (*WriteReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *WriteReturn) GetAttr() *Attribute {
	if m != nil {
		return m.Attr
	}
	return nil
}

type ReaddirArgs struct {
	Dirfh *FileHandle `protobuf:"bytes,1,opt,name=dirfh" json:"dirfh,omitempty"`
	Count uint64      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *ReaddirArgs) Reset()                    { *m = ReaddirArgs{} }
func (m *ReaddirArgs) String() string            { return proto.CompactTextString(m) }
func (*ReaddirArgs) ProtoMessage()               {}
func (*ReaddirArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReaddirArgs) GetDirfh() *FileHandle {
	if m != nil {
		return m.Dirfh
	}
	return nil
}

type ReaddirReturn struct {
	// directory entries
	Entries []*Dirent `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *ReaddirReturn) Reset()                    { *m = ReaddirReturn{} }
func (m *ReaddirReturn) String() string            { return proto.CompactTextString(m) }
func (*ReaddirReturn) ProtoMessage()               {}
func (*ReaddirReturn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReaddirReturn) GetEntries() []*Dirent {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*FileHandle)(nil), "nfs.FileHandle")
	proto.RegisterType((*Attribute)(nil), "nfs.Attribute")
	proto.RegisterType((*Dirent)(nil), "nfs.Dirent")
	proto.RegisterType((*LookupArgs)(nil), "nfs.LookupArgs")
	proto.RegisterType((*LookupReturn)(nil), "nfs.LookupReturn")
	proto.RegisterType((*RootArgs)(nil), "nfs.RootArgs")
	proto.RegisterType((*RootReturn)(nil), "nfs.RootReturn")
	proto.RegisterType((*CreateArgs)(nil), "nfs.CreateArgs")
	proto.RegisterType((*CreateReturn)(nil), "nfs.CreateReturn")
	proto.RegisterType((*RemoveArgs)(nil), "nfs.RemoveArgs")
	proto.RegisterType((*RemoveReturn)(nil), "nfs.RemoveReturn")
	proto.RegisterType((*ReadArgs)(nil), "nfs.ReadArgs")
	proto.RegisterType((*ReadReturn)(nil), "nfs.ReadReturn")
	proto.RegisterType((*WriteArgs)(nil), "nfs.WriteArgs")
	proto.RegisterType((*WriteReturn)(nil), "nfs.WriteReturn")
	proto.RegisterType((*ReaddirArgs)(nil), "nfs.ReaddirArgs")
	proto.RegisterType((*ReaddirReturn)(nil), "nfs.ReaddirReturn")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for NFS service

type NFSClient interface {
	// No null call for now (not sure if needed since grpc is smart itself!)
	Root(ctx context.Context, in *RootArgs, opts ...grpc.CallOption) (*RootReturn, error)
	Lookup(ctx context.Context, in *LookupArgs, opts ...grpc.CallOption) (*LookupReturn, error)
	Create(ctx context.Context, in *CreateArgs, opts ...grpc.CallOption) (*CreateReturn, error)
	Remove(ctx context.Context, in *RemoveArgs, opts ...grpc.CallOption) (*RemoveReturn, error)
	Read(ctx context.Context, in *ReadArgs, opts ...grpc.CallOption) (*ReadReturn, error)
	Write(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReturn, error)
	Readdir(ctx context.Context, in *ReaddirArgs, opts ...grpc.CallOption) (*ReaddirReturn, error)
}

type nFSClient struct {
	cc *grpc.ClientConn
}

func NewNFSClient(cc *grpc.ClientConn) NFSClient {
	return &nFSClient{cc}
}

func (c *nFSClient) Root(ctx context.Context, in *RootArgs, opts ...grpc.CallOption) (*RootReturn, error) {
	out := new(RootReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/root", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSClient) Lookup(ctx context.Context, in *LookupArgs, opts ...grpc.CallOption) (*LookupReturn, error) {
	out := new(LookupReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSClient) Create(ctx context.Context, in *CreateArgs, opts ...grpc.CallOption) (*CreateReturn, error) {
	out := new(CreateReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSClient) Remove(ctx context.Context, in *RemoveArgs, opts ...grpc.CallOption) (*RemoveReturn, error) {
	out := new(RemoveReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSClient) Read(ctx context.Context, in *ReadArgs, opts ...grpc.CallOption) (*ReadReturn, error) {
	out := new(ReadReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSClient) Write(ctx context.Context, in *WriteArgs, opts ...grpc.CallOption) (*WriteReturn, error) {
	out := new(WriteReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFSClient) Readdir(ctx context.Context, in *ReaddirArgs, opts ...grpc.CallOption) (*ReaddirReturn, error) {
	out := new(ReaddirReturn)
	err := grpc.Invoke(ctx, "/nfs.NFS/readdir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NFS service

type NFSServer interface {
	// No null call for now (not sure if needed since grpc is smart itself!)
	Root(context.Context, *RootArgs) (*RootReturn, error)
	Lookup(context.Context, *LookupArgs) (*LookupReturn, error)
	Create(context.Context, *CreateArgs) (*CreateReturn, error)
	Remove(context.Context, *RemoveArgs) (*RemoveReturn, error)
	Read(context.Context, *ReadArgs) (*ReadReturn, error)
	Write(context.Context, *WriteArgs) (*WriteReturn, error)
	Readdir(context.Context, *ReaddirArgs) (*ReaddirReturn, error)
}

func RegisterNFSServer(s *grpc.Server, srv NFSServer) {
	s.RegisterService(&_NFS_serviceDesc, srv)
}

func _NFS_Root_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Root(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Root",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Root(ctx, req.(*RootArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFS_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Lookup(ctx, req.(*LookupArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFS_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Create(ctx, req.(*CreateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFS_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Remove(ctx, req.(*RemoveArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFS_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Read(ctx, req.(*ReadArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFS_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Write(ctx, req.(*WriteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFS_Readdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReaddirArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFSServer).Readdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nfs.NFS/Readdir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFSServer).Readdir(ctx, req.(*ReaddirArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _NFS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nfs.NFS",
	HandlerType: (*NFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "root",
			Handler:    _NFS_Root_Handler,
		},
		{
			MethodName: "lookup",
			Handler:    _NFS_Lookup_Handler,
		},
		{
			MethodName: "create",
			Handler:    _NFS_Create_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _NFS_Remove_Handler,
		},
		{
			MethodName: "read",
			Handler:    _NFS_Read_Handler,
		},
		{
			MethodName: "write",
			Handler:    _NFS_Write_Handler,
		},
		{
			MethodName: "readdir",
			Handler:    _NFS_Readdir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("nfs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 619 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x4b, 0x1c, 0x3d,
	0x14, 0x76, 0x77, 0x66, 0x47, 0xe7, 0xcc, 0xee, 0xab, 0x6f, 0x28, 0x32, 0x2c, 0xf4, 0x83, 0x80,
	0x45, 0x28, 0x08, 0x6e, 0xa1, 0xf4, 0x56, 0x2a, 0x5a, 0x4a, 0x11, 0x1a, 0x2f, 0x8a, 0x57, 0x25,
	0xee, 0x64, 0xd6, 0xa0, 0x93, 0x48, 0x26, 0x53, 0xa1, 0xff, 0xae, 0x97, 0xfd, 0x57, 0x25, 0x27,
	0x99, 0x8f, 0x8b, 0xae, 0xb5, 0xe8, 0x5d, 0xce, 0x47, 0x9e, 0xe7, 0x3c, 0xe7, 0x9c, 0xcc, 0x40,
	0xaa, 0xca, 0xfa, 0xe0, 0xd6, 0x68, 0xab, 0x49, 0xa4, 0xca, 0x9a, 0xbe, 0x07, 0x38, 0x91, 0x37,
	0xe2, 0x23, 0x57, 0xc5, 0x8d, 0x20, 0xcf, 0x60, 0x22, 0x95, 0x2e, 0x44, 0x3e, 0x7a, 0x35, 0xda,
	0x8f, 0x99, 0x37, 0x9c, 0x77, 0x25, 0x54, 0x53, 0xe5, 0x63, 0xef, 0x45, 0x83, 0xfe, 0x1c, 0x41,
	0x7a, 0x64, 0xad, 0x91, 0x97, 0x8d, 0x15, 0x84, 0x40, 0x5c, 0xb5, 0x17, 0x67, 0x0c, 0xcf, 0x64,
	0x07, 0xa2, 0x46, 0x16, 0x78, 0x6b, 0xc6, 0xdc, 0xd1, 0x79, 0x56, 0xb2, 0xc8, 0x23, 0xef, 0x59,
	0xc9, 0xc2, 0xdd, 0xab, 0xe5, 0x0f, 0x91, 0xc7, 0x08, 0x8d, 0x67, 0xc7, 0xc7, 0xad, 0xac, 0x44,
	0x3e, 0xf1, 0x7c, 0x68, 0x38, 0x6f, 0x85, 0xde, 0xc4, 0x7b, 0xd1, 0x20, 0xcf, 0x01, 0x30, 0xfc,
	0x4d, 0xd5, 0x62, 0x99, 0x6f, 0x22, 0x70, 0x8a, 0x9e, 0xb3, 0x5a, 0x2c, 0x5d, 0xb8, 0xea, 0xc3,
	0x5b, 0x3e, 0x5c, 0xb5, 0x61, 0x7a, 0x02, 0xc9, 0xb1, 0x34, 0x42, 0xd9, 0x35, 0xca, 0x09, 0xc4,
	0x8a, 0x57, 0x02, 0x25, 0xa4, 0x0c, 0xcf, 0x9d, 0xd2, 0xa8, 0x57, 0x4a, 0x4f, 0x01, 0x3e, 0x6b,
	0x7d, 0xdd, 0xdc, 0x1e, 0x99, 0x55, 0x4d, 0xf6, 0x60, 0x52, 0x48, 0x53, 0x5e, 0x21, 0x56, 0xb6,
	0xd8, 0x3e, 0x70, 0x3d, 0xef, 0xbb, 0xcc, 0x7c, 0xf4, 0x4f, 0xe0, 0xf4, 0x1c, 0xa6, 0x1e, 0x88,
	0x09, 0xdb, 0x18, 0x45, 0x5e, 0xc2, 0x78, 0x3d, 0xce, 0xb8, 0xbc, 0x22, 0x14, 0x62, 0x6e, 0xad,
	0x41, 0x90, 0x6c, 0xf1, 0x1f, 0xa6, 0x74, 0x53, 0x61, 0x18, 0xa3, 0x2f, 0x60, 0x8b, 0x69, 0x6d,
	0xb1, 0x36, 0x02, 0xf1, 0x2d, 0xb7, 0x1e, 0x32, 0x65, 0x78, 0xa6, 0x5f, 0x00, 0x5c, 0xfc, 0x29,
	0x29, 0xaf, 0x01, 0x3e, 0x18, 0xc1, 0xad, 0x78, 0x64, 0x43, 0x3a, 0xb2, 0xe8, 0x1e, 0xb2, 0x0b,
	0x98, 0x7a, 0xb2, 0xa0, 0x60, 0x0f, 0x26, 0x4a, 0xdc, 0xdd, 0x43, 0x87, 0xd1, 0x07, 0xe9, 0x38,
	0x05, 0x60, 0xa2, 0xd2, 0xdf, 0x1f, 0xab, 0x83, 0xbe, 0x86, 0xa9, 0x07, 0x0a, 0x35, 0xee, 0x42,
	0x52, 0x5b, 0x6e, 0x9b, 0x1a, 0xb1, 0x26, 0x2c, 0x58, 0xf4, 0x02, 0xb6, 0x98, 0xe0, 0x05, 0xd2,
	0xfd, 0x75, 0x12, 0xbb, 0x90, 0xe8, 0xb2, 0xac, 0x85, 0x45, 0xaa, 0x88, 0x05, 0xcb, 0x2d, 0xf3,
	0x52, 0x37, 0xca, 0x62, 0xd7, 0x22, 0xe6, 0x0d, 0x7a, 0xec, 0xb4, 0xf0, 0x22, 0x14, 0xd0, 0xaa,
	0x1f, 0xad, 0x57, 0xef, 0x84, 0x14, 0xdc, 0x72, 0x44, 0x9f, 0x32, 0x3c, 0x53, 0x05, 0xe9, 0x57,
	0x23, 0xc3, 0x60, 0x9f, 0xb6, 0xc2, 0x8e, 0x2f, 0x1e, 0xf0, 0x1d, 0x42, 0x86, 0x7c, 0x0f, 0x2f,
	0x9b, 0x7e, 0x82, 0xcc, 0x09, 0x2d, 0xa4, 0xf9, 0x97, 0xa9, 0x75, 0x25, 0x85, 0xaf, 0x9c, 0x6f,
	0xda, 0x3b, 0x98, 0x05, 0xac, 0x6e, 0xb9, 0x36, 0x85, 0xb2, 0x46, 0x0a, 0x37, 0xb9, 0x68, 0x3f,
	0x5b, 0x64, 0x88, 0xe7, 0x3f, 0x23, 0xac, 0x8d, 0x2d, 0x7e, 0x8d, 0x21, 0x3a, 0x3b, 0x39, 0x27,
	0xfb, 0x10, 0x1b, 0xad, 0x2d, 0x99, 0x61, 0x56, 0xfb, 0x0c, 0xe7, 0xdb, 0x9d, 0xe9, 0x61, 0xe9,
	0x06, 0x39, 0x80, 0xe4, 0x06, 0x9f, 0x3e, 0xf1, 0xc1, 0xfe, 0x83, 0x32, 0xff, 0x7f, 0xe0, 0x18,
	0xe6, 0x2f, 0x71, 0xeb, 0x43, 0x7e, 0xff, 0xde, 0x42, 0xfe, 0xf0, 0x4d, 0xf8, 0x7c, 0x83, 0x1b,
	0x18, 0xf2, 0xfb, 0xbd, 0x0e, 0xf9, 0xc3, 0xfd, 0xa4, 0x1b, 0x58, 0xb9, 0xe0, 0x45, 0x5b, 0x79,
	0x58, 0xca, 0xb6, 0xf2, 0x6e, 0x91, 0xe8, 0x06, 0x79, 0x03, 0x93, 0x3b, 0x37, 0x22, 0xe2, 0xc7,
	0xd1, 0xad, 0xc7, 0x7c, 0xa7, 0xb7, 0xbb, 0xe4, 0x43, 0xd8, 0x34, 0xbe, 0xa1, 0x64, 0xa7, 0x83,
	0x0a, 0xa3, 0x9a, 0x93, 0xa1, 0xa7, 0xbd, 0x72, 0x99, 0xe0, 0xff, 0xea, 0xed, 0xef, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc3, 0x6e, 0x39, 0x8c, 0xbc, 0x06, 0x00, 0x00,
}
