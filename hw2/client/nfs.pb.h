// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nfs.proto

#ifndef PROTOBUF_nfs_2eproto__INCLUDED
#define PROTOBUF_nfs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nfs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nfs_2eproto();
void protobuf_AssignDesc_nfs_2eproto();
void protobuf_ShutdownFile_nfs_2eproto();

class Attribute;
class CreateArgs;
class CreateReturn;
class FileHandle;
class LookupArgs;
class LookupReturn;
class ReadArgs;
class ReadReturn;
class RemoveArgs;
class RemoveReturn;
class WriteArgs;
class WriteReturn;

// ===================================================================

class FileHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.FileHandle) */ {
 public:
  FileHandle();
  virtual ~FileHandle();

  FileHandle(const FileHandle& from);

  inline FileHandle& operator=(const FileHandle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileHandle& default_instance();

  void Swap(FileHandle* other);

  // implements Message ----------------------------------------------

  inline FileHandle* New() const { return New(NULL); }

  FileHandle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileHandle& from);
  void MergeFrom(const FileHandle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 inode = 1;
  void clear_inode();
  static const int kInodeFieldNumber = 1;
  ::google::protobuf::int32 inode() const;
  void set_inode(::google::protobuf::int32 value);

  // optional int32 fsnum = 2;
  void clear_fsnum();
  static const int kFsnumFieldNumber = 2;
  ::google::protobuf::int32 fsnum() const;
  void set_fsnum(::google::protobuf::int32 value);

  // optional int32 genum = 3;
  void clear_genum();
  static const int kGenumFieldNumber = 3;
  ::google::protobuf::int32 genum() const;
  void set_genum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nfs.FileHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 inode_;
  ::google::protobuf::int32 fsnum_;
  ::google::protobuf::int32 genum_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static FileHandle* default_instance_;
};
// -------------------------------------------------------------------

class Attribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.Attribute) */ {
 public:
  Attribute();
  virtual ~Attribute();

  Attribute(const Attribute& from);

  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute& default_instance();

  void Swap(Attribute* other);

  // implements Message ----------------------------------------------

  inline Attribute* New() const { return New(NULL); }

  Attribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Attribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nfs.Attribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static Attribute* default_instance_;
};
// -------------------------------------------------------------------

class LookupArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.LookupArgs) */ {
 public:
  LookupArgs();
  virtual ~LookupArgs();

  LookupArgs(const LookupArgs& from);

  inline LookupArgs& operator=(const LookupArgs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupArgs& default_instance();

  void Swap(LookupArgs* other);

  // implements Message ----------------------------------------------

  inline LookupArgs* New() const { return New(NULL); }

  LookupArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LookupArgs& from);
  void MergeFrom(const LookupArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle dirfh = 1;
  bool has_dirfh() const;
  void clear_dirfh();
  static const int kDirfhFieldNumber = 1;
  const ::nfs::FileHandle& dirfh() const;
  ::nfs::FileHandle* mutable_dirfh();
  ::nfs::FileHandle* release_dirfh();
  void set_allocated_dirfh(::nfs::FileHandle* dirfh);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:nfs.LookupArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* dirfh_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static LookupArgs* default_instance_;
};
// -------------------------------------------------------------------

class LookupReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.LookupReturn) */ {
 public:
  LookupReturn();
  virtual ~LookupReturn();

  LookupReturn(const LookupReturn& from);

  inline LookupReturn& operator=(const LookupReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupReturn& default_instance();

  void Swap(LookupReturn* other);

  // implements Message ----------------------------------------------

  inline LookupReturn* New() const { return New(NULL); }

  LookupReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LookupReturn& from);
  void MergeFrom(const LookupReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LookupReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle fh = 1;
  bool has_fh() const;
  void clear_fh();
  static const int kFhFieldNumber = 1;
  const ::nfs::FileHandle& fh() const;
  ::nfs::FileHandle* mutable_fh();
  ::nfs::FileHandle* release_fh();
  void set_allocated_fh(::nfs::FileHandle* fh);

  // optional .nfs.Attribute attr = 2;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 2;
  const ::nfs::Attribute& attr() const;
  ::nfs::Attribute* mutable_attr();
  ::nfs::Attribute* release_attr();
  void set_allocated_attr(::nfs::Attribute* attr);

  // @@protoc_insertion_point(class_scope:nfs.LookupReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* fh_;
  ::nfs::Attribute* attr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static LookupReturn* default_instance_;
};
// -------------------------------------------------------------------

class CreateArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.CreateArgs) */ {
 public:
  CreateArgs();
  virtual ~CreateArgs();

  CreateArgs(const CreateArgs& from);

  inline CreateArgs& operator=(const CreateArgs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateArgs& default_instance();

  void Swap(CreateArgs* other);

  // implements Message ----------------------------------------------

  inline CreateArgs* New() const { return New(NULL); }

  CreateArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateArgs& from);
  void MergeFrom(const CreateArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle dirfh = 1;
  bool has_dirfh() const;
  void clear_dirfh();
  static const int kDirfhFieldNumber = 1;
  const ::nfs::FileHandle& dirfh() const;
  ::nfs::FileHandle* mutable_dirfh();
  ::nfs::FileHandle* release_dirfh();
  void set_allocated_dirfh(::nfs::FileHandle* dirfh);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .nfs.Attribute attr = 3;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 3;
  const ::nfs::Attribute& attr() const;
  ::nfs::Attribute* mutable_attr();
  ::nfs::Attribute* release_attr();
  void set_allocated_attr(::nfs::Attribute* attr);

  // @@protoc_insertion_point(class_scope:nfs.CreateArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* dirfh_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::nfs::Attribute* attr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static CreateArgs* default_instance_;
};
// -------------------------------------------------------------------

class CreateReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.CreateReturn) */ {
 public:
  CreateReturn();
  virtual ~CreateReturn();

  CreateReturn(const CreateReturn& from);

  inline CreateReturn& operator=(const CreateReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateReturn& default_instance();

  void Swap(CreateReturn* other);

  // implements Message ----------------------------------------------

  inline CreateReturn* New() const { return New(NULL); }

  CreateReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateReturn& from);
  void MergeFrom(const CreateReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle newfh = 1;
  bool has_newfh() const;
  void clear_newfh();
  static const int kNewfhFieldNumber = 1;
  const ::nfs::FileHandle& newfh() const;
  ::nfs::FileHandle* mutable_newfh();
  ::nfs::FileHandle* release_newfh();
  void set_allocated_newfh(::nfs::FileHandle* newfh);

  // optional .nfs.Attribute attr = 2;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 2;
  const ::nfs::Attribute& attr() const;
  ::nfs::Attribute* mutable_attr();
  ::nfs::Attribute* release_attr();
  void set_allocated_attr(::nfs::Attribute* attr);

  // @@protoc_insertion_point(class_scope:nfs.CreateReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* newfh_;
  ::nfs::Attribute* attr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static CreateReturn* default_instance_;
};
// -------------------------------------------------------------------

class RemoveArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.RemoveArgs) */ {
 public:
  RemoveArgs();
  virtual ~RemoveArgs();

  RemoveArgs(const RemoveArgs& from);

  inline RemoveArgs& operator=(const RemoveArgs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveArgs& default_instance();

  void Swap(RemoveArgs* other);

  // implements Message ----------------------------------------------

  inline RemoveArgs* New() const { return New(NULL); }

  RemoveArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveArgs& from);
  void MergeFrom(const RemoveArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle dirfh = 1;
  bool has_dirfh() const;
  void clear_dirfh();
  static const int kDirfhFieldNumber = 1;
  const ::nfs::FileHandle& dirfh() const;
  ::nfs::FileHandle* mutable_dirfh();
  ::nfs::FileHandle* release_dirfh();
  void set_allocated_dirfh(::nfs::FileHandle* dirfh);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:nfs.RemoveArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* dirfh_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static RemoveArgs* default_instance_;
};
// -------------------------------------------------------------------

class RemoveReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.RemoveReturn) */ {
 public:
  RemoveReturn();
  virtual ~RemoveReturn();

  RemoveReturn(const RemoveReturn& from);

  inline RemoveReturn& operator=(const RemoveReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveReturn& default_instance();

  void Swap(RemoveReturn* other);

  // implements Message ----------------------------------------------

  inline RemoveReturn* New() const { return New(NULL); }

  RemoveReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveReturn& from);
  void MergeFrom(const RemoveReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nfs.RemoveReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static RemoveReturn* default_instance_;
};
// -------------------------------------------------------------------

class ReadArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.ReadArgs) */ {
 public:
  ReadArgs();
  virtual ~ReadArgs();

  ReadArgs(const ReadArgs& from);

  inline ReadArgs& operator=(const ReadArgs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadArgs& default_instance();

  void Swap(ReadArgs* other);

  // implements Message ----------------------------------------------

  inline ReadArgs* New() const { return New(NULL); }

  ReadArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadArgs& from);
  void MergeFrom(const ReadArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle fh = 1;
  bool has_fh() const;
  void clear_fh();
  static const int kFhFieldNumber = 1;
  const ::nfs::FileHandle& fh() const;
  ::nfs::FileHandle* mutable_fh();
  ::nfs::FileHandle* release_fh();
  void set_allocated_fh(::nfs::FileHandle* fh);

  // optional int32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // optional int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nfs.ReadArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* fh_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static ReadArgs* default_instance_;
};
// -------------------------------------------------------------------

class ReadReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.ReadReturn) */ {
 public:
  ReadReturn();
  virtual ~ReadReturn();

  ReadReturn(const ReadReturn& from);

  inline ReadReturn& operator=(const ReadReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadReturn& default_instance();

  void Swap(ReadReturn* other);

  // implements Message ----------------------------------------------

  inline ReadReturn* New() const { return New(NULL); }

  ReadReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadReturn& from);
  void MergeFrom(const ReadReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.Attribute attr = 1;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 1;
  const ::nfs::Attribute& attr() const;
  ::nfs::Attribute* mutable_attr();
  ::nfs::Attribute* release_attr();
  void set_allocated_attr(::nfs::Attribute* attr);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nfs.ReadReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::Attribute* attr_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static ReadReturn* default_instance_;
};
// -------------------------------------------------------------------

class WriteArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.WriteArgs) */ {
 public:
  WriteArgs();
  virtual ~WriteArgs();

  WriteArgs(const WriteArgs& from);

  inline WriteArgs& operator=(const WriteArgs& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteArgs& default_instance();

  void Swap(WriteArgs* other);

  // implements Message ----------------------------------------------

  inline WriteArgs* New() const { return New(NULL); }

  WriteArgs* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteArgs& from);
  void MergeFrom(const WriteArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.FileHandle fh = 1;
  bool has_fh() const;
  void clear_fh();
  static const int kFhFieldNumber = 1;
  const ::nfs::FileHandle& fh() const;
  ::nfs::FileHandle* mutable_fh();
  ::nfs::FileHandle* release_fh();
  void set_allocated_fh(::nfs::FileHandle* fh);

  // optional int32 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // optional int32 count = 3;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:nfs.WriteArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::FileHandle* fh_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static WriteArgs* default_instance_;
};
// -------------------------------------------------------------------

class WriteReturn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nfs.WriteReturn) */ {
 public:
  WriteReturn();
  virtual ~WriteReturn();

  WriteReturn(const WriteReturn& from);

  inline WriteReturn& operator=(const WriteReturn& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteReturn& default_instance();

  void Swap(WriteReturn* other);

  // implements Message ----------------------------------------------

  inline WriteReturn* New() const { return New(NULL); }

  WriteReturn* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteReturn& from);
  void MergeFrom(const WriteReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WriteReturn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nfs.Attribute attr = 1;
  bool has_attr() const;
  void clear_attr();
  static const int kAttrFieldNumber = 1;
  const ::nfs::Attribute& attr() const;
  ::nfs::Attribute* mutable_attr();
  ::nfs::Attribute* release_attr();
  void set_allocated_attr(::nfs::Attribute* attr);

  // @@protoc_insertion_point(class_scope:nfs.WriteReturn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::nfs::Attribute* attr_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nfs_2eproto();
  friend void protobuf_AssignDesc_nfs_2eproto();
  friend void protobuf_ShutdownFile_nfs_2eproto();

  void InitAsDefaultInstance();
  static WriteReturn* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FileHandle

// optional int32 inode = 1;
inline void FileHandle::clear_inode() {
  inode_ = 0;
}
inline ::google::protobuf::int32 FileHandle::inode() const {
  // @@protoc_insertion_point(field_get:nfs.FileHandle.inode)
  return inode_;
}
inline void FileHandle::set_inode(::google::protobuf::int32 value) {
  
  inode_ = value;
  // @@protoc_insertion_point(field_set:nfs.FileHandle.inode)
}

// optional int32 fsnum = 2;
inline void FileHandle::clear_fsnum() {
  fsnum_ = 0;
}
inline ::google::protobuf::int32 FileHandle::fsnum() const {
  // @@protoc_insertion_point(field_get:nfs.FileHandle.fsnum)
  return fsnum_;
}
inline void FileHandle::set_fsnum(::google::protobuf::int32 value) {
  
  fsnum_ = value;
  // @@protoc_insertion_point(field_set:nfs.FileHandle.fsnum)
}

// optional int32 genum = 3;
inline void FileHandle::clear_genum() {
  genum_ = 0;
}
inline ::google::protobuf::int32 FileHandle::genum() const {
  // @@protoc_insertion_point(field_get:nfs.FileHandle.genum)
  return genum_;
}
inline void FileHandle::set_genum(::google::protobuf::int32 value) {
  
  genum_ = value;
  // @@protoc_insertion_point(field_set:nfs.FileHandle.genum)
}

// -------------------------------------------------------------------

// Attribute

// -------------------------------------------------------------------

// LookupArgs

// optional .nfs.FileHandle dirfh = 1;
inline bool LookupArgs::has_dirfh() const {
  return !_is_default_instance_ && dirfh_ != NULL;
}
inline void LookupArgs::clear_dirfh() {
  if (GetArenaNoVirtual() == NULL && dirfh_ != NULL) delete dirfh_;
  dirfh_ = NULL;
}
inline const ::nfs::FileHandle& LookupArgs::dirfh() const {
  // @@protoc_insertion_point(field_get:nfs.LookupArgs.dirfh)
  return dirfh_ != NULL ? *dirfh_ : *default_instance_->dirfh_;
}
inline ::nfs::FileHandle* LookupArgs::mutable_dirfh() {
  
  if (dirfh_ == NULL) {
    dirfh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.LookupArgs.dirfh)
  return dirfh_;
}
inline ::nfs::FileHandle* LookupArgs::release_dirfh() {
  // @@protoc_insertion_point(field_release:nfs.LookupArgs.dirfh)
  
  ::nfs::FileHandle* temp = dirfh_;
  dirfh_ = NULL;
  return temp;
}
inline void LookupArgs::set_allocated_dirfh(::nfs::FileHandle* dirfh) {
  delete dirfh_;
  dirfh_ = dirfh;
  if (dirfh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.LookupArgs.dirfh)
}

// optional string name = 2;
inline void LookupArgs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LookupArgs::name() const {
  // @@protoc_insertion_point(field_get:nfs.LookupArgs.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookupArgs::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.LookupArgs.name)
}
inline void LookupArgs::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.LookupArgs.name)
}
inline void LookupArgs::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.LookupArgs.name)
}
inline ::std::string* LookupArgs::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.LookupArgs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LookupArgs::release_name() {
  // @@protoc_insertion_point(field_release:nfs.LookupArgs.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LookupArgs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nfs.LookupArgs.name)
}

// -------------------------------------------------------------------

// LookupReturn

// optional .nfs.FileHandle fh = 1;
inline bool LookupReturn::has_fh() const {
  return !_is_default_instance_ && fh_ != NULL;
}
inline void LookupReturn::clear_fh() {
  if (GetArenaNoVirtual() == NULL && fh_ != NULL) delete fh_;
  fh_ = NULL;
}
inline const ::nfs::FileHandle& LookupReturn::fh() const {
  // @@protoc_insertion_point(field_get:nfs.LookupReturn.fh)
  return fh_ != NULL ? *fh_ : *default_instance_->fh_;
}
inline ::nfs::FileHandle* LookupReturn::mutable_fh() {
  
  if (fh_ == NULL) {
    fh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.LookupReturn.fh)
  return fh_;
}
inline ::nfs::FileHandle* LookupReturn::release_fh() {
  // @@protoc_insertion_point(field_release:nfs.LookupReturn.fh)
  
  ::nfs::FileHandle* temp = fh_;
  fh_ = NULL;
  return temp;
}
inline void LookupReturn::set_allocated_fh(::nfs::FileHandle* fh) {
  delete fh_;
  fh_ = fh;
  if (fh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.LookupReturn.fh)
}

// optional .nfs.Attribute attr = 2;
inline bool LookupReturn::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
inline void LookupReturn::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
inline const ::nfs::Attribute& LookupReturn::attr() const {
  // @@protoc_insertion_point(field_get:nfs.LookupReturn.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::nfs::Attribute* LookupReturn::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::nfs::Attribute;
  }
  // @@protoc_insertion_point(field_mutable:nfs.LookupReturn.attr)
  return attr_;
}
inline ::nfs::Attribute* LookupReturn::release_attr() {
  // @@protoc_insertion_point(field_release:nfs.LookupReturn.attr)
  
  ::nfs::Attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void LookupReturn::set_allocated_attr(::nfs::Attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.LookupReturn.attr)
}

// -------------------------------------------------------------------

// CreateArgs

// optional .nfs.FileHandle dirfh = 1;
inline bool CreateArgs::has_dirfh() const {
  return !_is_default_instance_ && dirfh_ != NULL;
}
inline void CreateArgs::clear_dirfh() {
  if (GetArenaNoVirtual() == NULL && dirfh_ != NULL) delete dirfh_;
  dirfh_ = NULL;
}
inline const ::nfs::FileHandle& CreateArgs::dirfh() const {
  // @@protoc_insertion_point(field_get:nfs.CreateArgs.dirfh)
  return dirfh_ != NULL ? *dirfh_ : *default_instance_->dirfh_;
}
inline ::nfs::FileHandle* CreateArgs::mutable_dirfh() {
  
  if (dirfh_ == NULL) {
    dirfh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.CreateArgs.dirfh)
  return dirfh_;
}
inline ::nfs::FileHandle* CreateArgs::release_dirfh() {
  // @@protoc_insertion_point(field_release:nfs.CreateArgs.dirfh)
  
  ::nfs::FileHandle* temp = dirfh_;
  dirfh_ = NULL;
  return temp;
}
inline void CreateArgs::set_allocated_dirfh(::nfs::FileHandle* dirfh) {
  delete dirfh_;
  dirfh_ = dirfh;
  if (dirfh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.CreateArgs.dirfh)
}

// optional string name = 2;
inline void CreateArgs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateArgs::name() const {
  // @@protoc_insertion_point(field_get:nfs.CreateArgs.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateArgs::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.CreateArgs.name)
}
inline void CreateArgs::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.CreateArgs.name)
}
inline void CreateArgs::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.CreateArgs.name)
}
inline ::std::string* CreateArgs::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.CreateArgs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateArgs::release_name() {
  // @@protoc_insertion_point(field_release:nfs.CreateArgs.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateArgs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nfs.CreateArgs.name)
}

// optional .nfs.Attribute attr = 3;
inline bool CreateArgs::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
inline void CreateArgs::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
inline const ::nfs::Attribute& CreateArgs::attr() const {
  // @@protoc_insertion_point(field_get:nfs.CreateArgs.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::nfs::Attribute* CreateArgs::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::nfs::Attribute;
  }
  // @@protoc_insertion_point(field_mutable:nfs.CreateArgs.attr)
  return attr_;
}
inline ::nfs::Attribute* CreateArgs::release_attr() {
  // @@protoc_insertion_point(field_release:nfs.CreateArgs.attr)
  
  ::nfs::Attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void CreateArgs::set_allocated_attr(::nfs::Attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.CreateArgs.attr)
}

// -------------------------------------------------------------------

// CreateReturn

// optional .nfs.FileHandle newfh = 1;
inline bool CreateReturn::has_newfh() const {
  return !_is_default_instance_ && newfh_ != NULL;
}
inline void CreateReturn::clear_newfh() {
  if (GetArenaNoVirtual() == NULL && newfh_ != NULL) delete newfh_;
  newfh_ = NULL;
}
inline const ::nfs::FileHandle& CreateReturn::newfh() const {
  // @@protoc_insertion_point(field_get:nfs.CreateReturn.newfh)
  return newfh_ != NULL ? *newfh_ : *default_instance_->newfh_;
}
inline ::nfs::FileHandle* CreateReturn::mutable_newfh() {
  
  if (newfh_ == NULL) {
    newfh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.CreateReturn.newfh)
  return newfh_;
}
inline ::nfs::FileHandle* CreateReturn::release_newfh() {
  // @@protoc_insertion_point(field_release:nfs.CreateReturn.newfh)
  
  ::nfs::FileHandle* temp = newfh_;
  newfh_ = NULL;
  return temp;
}
inline void CreateReturn::set_allocated_newfh(::nfs::FileHandle* newfh) {
  delete newfh_;
  newfh_ = newfh;
  if (newfh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.CreateReturn.newfh)
}

// optional .nfs.Attribute attr = 2;
inline bool CreateReturn::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
inline void CreateReturn::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
inline const ::nfs::Attribute& CreateReturn::attr() const {
  // @@protoc_insertion_point(field_get:nfs.CreateReturn.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::nfs::Attribute* CreateReturn::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::nfs::Attribute;
  }
  // @@protoc_insertion_point(field_mutable:nfs.CreateReturn.attr)
  return attr_;
}
inline ::nfs::Attribute* CreateReturn::release_attr() {
  // @@protoc_insertion_point(field_release:nfs.CreateReturn.attr)
  
  ::nfs::Attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void CreateReturn::set_allocated_attr(::nfs::Attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.CreateReturn.attr)
}

// -------------------------------------------------------------------

// RemoveArgs

// optional .nfs.FileHandle dirfh = 1;
inline bool RemoveArgs::has_dirfh() const {
  return !_is_default_instance_ && dirfh_ != NULL;
}
inline void RemoveArgs::clear_dirfh() {
  if (GetArenaNoVirtual() == NULL && dirfh_ != NULL) delete dirfh_;
  dirfh_ = NULL;
}
inline const ::nfs::FileHandle& RemoveArgs::dirfh() const {
  // @@protoc_insertion_point(field_get:nfs.RemoveArgs.dirfh)
  return dirfh_ != NULL ? *dirfh_ : *default_instance_->dirfh_;
}
inline ::nfs::FileHandle* RemoveArgs::mutable_dirfh() {
  
  if (dirfh_ == NULL) {
    dirfh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.RemoveArgs.dirfh)
  return dirfh_;
}
inline ::nfs::FileHandle* RemoveArgs::release_dirfh() {
  // @@protoc_insertion_point(field_release:nfs.RemoveArgs.dirfh)
  
  ::nfs::FileHandle* temp = dirfh_;
  dirfh_ = NULL;
  return temp;
}
inline void RemoveArgs::set_allocated_dirfh(::nfs::FileHandle* dirfh) {
  delete dirfh_;
  dirfh_ = dirfh;
  if (dirfh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.RemoveArgs.dirfh)
}

// optional string name = 2;
inline void RemoveArgs::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveArgs::name() const {
  // @@protoc_insertion_point(field_get:nfs.RemoveArgs.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveArgs::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.RemoveArgs.name)
}
inline void RemoveArgs::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.RemoveArgs.name)
}
inline void RemoveArgs::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.RemoveArgs.name)
}
inline ::std::string* RemoveArgs::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nfs.RemoveArgs.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveArgs::release_name() {
  // @@protoc_insertion_point(field_release:nfs.RemoveArgs.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveArgs::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nfs.RemoveArgs.name)
}

// -------------------------------------------------------------------

// RemoveReturn

// optional int32 status = 1;
inline void RemoveReturn::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 RemoveReturn::status() const {
  // @@protoc_insertion_point(field_get:nfs.RemoveReturn.status)
  return status_;
}
inline void RemoveReturn::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:nfs.RemoveReturn.status)
}

// -------------------------------------------------------------------

// ReadArgs

// optional .nfs.FileHandle fh = 1;
inline bool ReadArgs::has_fh() const {
  return !_is_default_instance_ && fh_ != NULL;
}
inline void ReadArgs::clear_fh() {
  if (GetArenaNoVirtual() == NULL && fh_ != NULL) delete fh_;
  fh_ = NULL;
}
inline const ::nfs::FileHandle& ReadArgs::fh() const {
  // @@protoc_insertion_point(field_get:nfs.ReadArgs.fh)
  return fh_ != NULL ? *fh_ : *default_instance_->fh_;
}
inline ::nfs::FileHandle* ReadArgs::mutable_fh() {
  
  if (fh_ == NULL) {
    fh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.ReadArgs.fh)
  return fh_;
}
inline ::nfs::FileHandle* ReadArgs::release_fh() {
  // @@protoc_insertion_point(field_release:nfs.ReadArgs.fh)
  
  ::nfs::FileHandle* temp = fh_;
  fh_ = NULL;
  return temp;
}
inline void ReadArgs::set_allocated_fh(::nfs::FileHandle* fh) {
  delete fh_;
  fh_ = fh;
  if (fh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.ReadArgs.fh)
}

// optional int32 offset = 2;
inline void ReadArgs::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 ReadArgs::offset() const {
  // @@protoc_insertion_point(field_get:nfs.ReadArgs.offset)
  return offset_;
}
inline void ReadArgs::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.ReadArgs.offset)
}

// optional int32 count = 3;
inline void ReadArgs::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 ReadArgs::count() const {
  // @@protoc_insertion_point(field_get:nfs.ReadArgs.count)
  return count_;
}
inline void ReadArgs::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:nfs.ReadArgs.count)
}

// -------------------------------------------------------------------

// ReadReturn

// optional .nfs.Attribute attr = 1;
inline bool ReadReturn::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
inline void ReadReturn::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
inline const ::nfs::Attribute& ReadReturn::attr() const {
  // @@protoc_insertion_point(field_get:nfs.ReadReturn.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::nfs::Attribute* ReadReturn::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::nfs::Attribute;
  }
  // @@protoc_insertion_point(field_mutable:nfs.ReadReturn.attr)
  return attr_;
}
inline ::nfs::Attribute* ReadReturn::release_attr() {
  // @@protoc_insertion_point(field_release:nfs.ReadReturn.attr)
  
  ::nfs::Attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void ReadReturn::set_allocated_attr(::nfs::Attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.ReadReturn.attr)
}

// optional bytes data = 2;
inline void ReadReturn::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadReturn::data() const {
  // @@protoc_insertion_point(field_get:nfs.ReadReturn.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadReturn::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.ReadReturn.data)
}
inline void ReadReturn::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.ReadReturn.data)
}
inline void ReadReturn::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.ReadReturn.data)
}
inline ::std::string* ReadReturn::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:nfs.ReadReturn.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadReturn::release_data() {
  // @@protoc_insertion_point(field_release:nfs.ReadReturn.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadReturn::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:nfs.ReadReturn.data)
}

// -------------------------------------------------------------------

// WriteArgs

// optional .nfs.FileHandle fh = 1;
inline bool WriteArgs::has_fh() const {
  return !_is_default_instance_ && fh_ != NULL;
}
inline void WriteArgs::clear_fh() {
  if (GetArenaNoVirtual() == NULL && fh_ != NULL) delete fh_;
  fh_ = NULL;
}
inline const ::nfs::FileHandle& WriteArgs::fh() const {
  // @@protoc_insertion_point(field_get:nfs.WriteArgs.fh)
  return fh_ != NULL ? *fh_ : *default_instance_->fh_;
}
inline ::nfs::FileHandle* WriteArgs::mutable_fh() {
  
  if (fh_ == NULL) {
    fh_ = new ::nfs::FileHandle;
  }
  // @@protoc_insertion_point(field_mutable:nfs.WriteArgs.fh)
  return fh_;
}
inline ::nfs::FileHandle* WriteArgs::release_fh() {
  // @@protoc_insertion_point(field_release:nfs.WriteArgs.fh)
  
  ::nfs::FileHandle* temp = fh_;
  fh_ = NULL;
  return temp;
}
inline void WriteArgs::set_allocated_fh(::nfs::FileHandle* fh) {
  delete fh_;
  fh_ = fh;
  if (fh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.WriteArgs.fh)
}

// optional int32 offset = 2;
inline void WriteArgs::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 WriteArgs::offset() const {
  // @@protoc_insertion_point(field_get:nfs.WriteArgs.offset)
  return offset_;
}
inline void WriteArgs::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:nfs.WriteArgs.offset)
}

// optional int32 count = 3;
inline void WriteArgs::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 WriteArgs::count() const {
  // @@protoc_insertion_point(field_get:nfs.WriteArgs.count)
  return count_;
}
inline void WriteArgs::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:nfs.WriteArgs.count)
}

// optional bytes data = 4;
inline void WriteArgs::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WriteArgs::data() const {
  // @@protoc_insertion_point(field_get:nfs.WriteArgs.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteArgs::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nfs.WriteArgs.data)
}
inline void WriteArgs::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nfs.WriteArgs.data)
}
inline void WriteArgs::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nfs.WriteArgs.data)
}
inline ::std::string* WriteArgs::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:nfs.WriteArgs.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WriteArgs::release_data() {
  // @@protoc_insertion_point(field_release:nfs.WriteArgs.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WriteArgs::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:nfs.WriteArgs.data)
}

// -------------------------------------------------------------------

// WriteReturn

// optional .nfs.Attribute attr = 1;
inline bool WriteReturn::has_attr() const {
  return !_is_default_instance_ && attr_ != NULL;
}
inline void WriteReturn::clear_attr() {
  if (GetArenaNoVirtual() == NULL && attr_ != NULL) delete attr_;
  attr_ = NULL;
}
inline const ::nfs::Attribute& WriteReturn::attr() const {
  // @@protoc_insertion_point(field_get:nfs.WriteReturn.attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::nfs::Attribute* WriteReturn::mutable_attr() {
  
  if (attr_ == NULL) {
    attr_ = new ::nfs::Attribute;
  }
  // @@protoc_insertion_point(field_mutable:nfs.WriteReturn.attr)
  return attr_;
}
inline ::nfs::Attribute* WriteReturn::release_attr() {
  // @@protoc_insertion_point(field_release:nfs.WriteReturn.attr)
  
  ::nfs::Attribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void WriteReturn::set_allocated_attr(::nfs::Attribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:nfs.WriteReturn.attr)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nfs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nfs_2eproto__INCLUDED
