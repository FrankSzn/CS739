// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: nfs.proto

#include "nfs.pb.h"
#include "nfs.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace nfs {

static const char* NFS_method_names[] = {
  "/nfs.NFS/lookup",
  "/nfs.NFS/create",
  "/nfs.NFS/remove",
  "/nfs.NFS/read",
  "/nfs.NFS/write",
};

std::unique_ptr< NFS::Stub> NFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< NFS::Stub> stub(new NFS::Stub(channel));
  return stub;
}

NFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_lookup_(NFS_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_create_(NFS_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_remove_(NFS_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_read_(NFS_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_write_(NFS_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NFS::Stub::lookup(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::nfs::LookupReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_lookup_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfs::LookupReturn>* NFS::Stub::AsynclookupRaw(::grpc::ClientContext* context, const ::nfs::LookupArgs& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfs::LookupReturn>(channel_.get(), cq, rpcmethod_lookup_, context, request);
}

::grpc::Status NFS::Stub::create(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::nfs::CreateReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_create_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfs::CreateReturn>* NFS::Stub::AsynccreateRaw(::grpc::ClientContext* context, const ::nfs::CreateArgs& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfs::CreateReturn>(channel_.get(), cq, rpcmethod_create_, context, request);
}

::grpc::Status NFS::Stub::remove(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::nfs::RemoveReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_remove_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfs::RemoveReturn>* NFS::Stub::AsyncremoveRaw(::grpc::ClientContext* context, const ::nfs::RemoveArgs& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfs::RemoveReturn>(channel_.get(), cq, rpcmethod_remove_, context, request);
}

::grpc::Status NFS::Stub::read(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::nfs::ReadReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_read_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfs::ReadReturn>* NFS::Stub::AsyncreadRaw(::grpc::ClientContext* context, const ::nfs::ReadArgs& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfs::ReadReturn>(channel_.get(), cq, rpcmethod_read_, context, request);
}

::grpc::Status NFS::Stub::write(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::nfs::WriteReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_write_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfs::WriteReturn>* NFS::Stub::AsyncwriteRaw(::grpc::ClientContext* context, const ::nfs::WriteArgs& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfs::WriteReturn>(channel_.get(), cq, rpcmethod_write_, context, request);
}

NFS::Service::Service() {
  (void)NFS_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfs::LookupArgs, ::nfs::LookupReturn>(
          std::mem_fn(&NFS::Service::lookup), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfs::CreateArgs, ::nfs::CreateReturn>(
          std::mem_fn(&NFS::Service::create), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfs::RemoveArgs, ::nfs::RemoveReturn>(
          std::mem_fn(&NFS::Service::remove), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfs::ReadArgs, ::nfs::ReadReturn>(
          std::mem_fn(&NFS::Service::read), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfs::WriteArgs, ::nfs::WriteReturn>(
          std::mem_fn(&NFS::Service::write), this)));
}

NFS::Service::~Service() {
}

::grpc::Status NFS::Service::lookup(::grpc::ServerContext* context, const ::nfs::LookupArgs* request, ::nfs::LookupReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::create(::grpc::ServerContext* context, const ::nfs::CreateArgs* request, ::nfs::CreateReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::remove(::grpc::ServerContext* context, const ::nfs::RemoveArgs* request, ::nfs::RemoveReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::read(::grpc::ServerContext* context, const ::nfs::ReadArgs* request, ::nfs::ReadReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::write(::grpc::ServerContext* context, const ::nfs::WriteArgs* request, ::nfs::WriteReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nfs

